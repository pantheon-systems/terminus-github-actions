name: Setup Terminus
description: "Install and configure the Pantheon CLI tool, Terminus."
branding:
  icon: "cloud"
  color: "yellow"
inputs:
  pantheon-machine-token:
    description: "Machine token used to authenticate with Pantheon."
    required: false
  terminus-version:
    description: |
      The full version of Terminus to install. If omitted, the latest version is used.
    required: false
  disable-cache:
    description: Disable session cache and force a new session to be initiated.
    required: false
    default: false
  debug:
    description: Enable debug output for version detection and download stages.
    required: false
    default: false

runs:
  using: composite
  steps:
    - name: Set Terminus version
      if: ${{ ! inputs.terminus-version }}
      shell: bash
      env:
        DEBUG: ${{ inputs.debug }}
      run: |
        if [[ "$DEBUG" == "true" ]]; then
          echo "::debug::Debug mode enabled for version detection"
          echo "::debug::No terminus-version input provided, fetching latest release"
          echo "::debug::Making API call to GitHub releases endpoint"
        fi

        TERMINUS_RELEASE=$(
          curl --silent \
            --header 'authorization: Bearer ${{ github.token }}' \
            "https://api.github.com/repos/pantheon-systems/terminus/releases/latest" \
            | perl -nle'print $& while m#"tag_name": "\K[^"]*#g'
        )

        if [[ "$DEBUG" == "true" ]]; then
          echo "::debug::API response processed, extracted version: $TERMINUS_RELEASE"
          echo "::debug::Setting TERMINUS_RELEASE environment variable to: $TERMINUS_RELEASE"
        fi

        echo "TERMINUS_RELEASE=$TERMINUS_RELEASE" >> $GITHUB_ENV

    - name: Install Terminus
      shell: bash
      run: |
        FINAL_VERSION="${{ inputs.terminus-version || env.TERMINUS_RELEASE }}"

        if [[ "${{ inputs.debug }}" == "true" ]]; then
          echo "::debug::Debug mode enabled for download stage"
          if [[ -n "${{ inputs.terminus-version }}" ]]; then
            echo "::debug::Using user-specified version: ${{ inputs.terminus-version }}"
          else
            echo "::debug::Using version from previous step: $TERMINUS_RELEASE"
          fi
          echo "::debug::Final version to install: $FINAL_VERSION"
          echo "::debug::Creating installation directory: $HOME/terminus"
        fi

        mkdir $HOME/terminus && cd $HOME/terminus
        echo "Installing Terminus v$FINAL_VERSION"

        if [[ "${{ inputs.debug }}" == "true" ]]; then
          echo "::debug::Download URL: https://github.com/pantheon-systems/terminus/releases/download/$FINAL_VERSION/terminus.phar"
          echo "::debug::Starting download..."
        fi

        curl -L https://github.com/pantheon-systems/terminus/releases/download/$FINAL_VERSION/terminus.phar --output terminus

        if [[ "${{ inputs.debug }}" == "true" ]]; then
          echo "::debug::Download completed, file size: $(ls -lh terminus | awk '{print $5}')"
          echo "::debug::Making terminus executable..."
        fi

        chmod +x terminus
        sudo ln -s $HOME/terminus/terminus /usr/local/bin/terminus
        mkdir -p $HOME/.terminus/{cache,plugins}

        if [[ "${{ inputs.debug }}" == "true" ]]; then
          echo "::debug::Installation complete, verifying..."
          terminus --version || echo "::debug::Version check failed"
        fi
      env:
        TERMINUS_RELEASE: ${{ inputs.terminus-version || env.TERMINUS_RELEASE }}

    - name: Set cache path, key, and restore-key
      id: configure-cache
      shell: bash
      run: |

        # Generate a hash of the machine token to use as a restore-key.
        machine_token_hash=`echo ${{ inputs.pantheon-machine-token }} | sha256sum | head -c 40`
        restore_key="terminus-session-$machine_token_hash"

        # Set path, cache key, and restore-key for later steps.
        echo "path=${{ runner.temp }}/terminus-session.enc" >> $GITHUB_OUTPUT
        echo "restore-key=$restore_key-" >> $GITHUB_OUTPUT
        echo "key=$restore_key-${{ github.run_id }}" >> $GITHUB_OUTPUT

    - name: Restore cached encrypted Terminus session
      id: restore-cache
      if: ${{ inputs.disable-cache != 'true' }}
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.configure-cache.outputs.path }}
        key: ${{ steps.configure-cache.outputs.key }}
        enableCrossOsArchive: true

    - name: Decrypt cached session file
      id: decrypt
      if: ${{ steps.restore-cache.outcome == 'success' }}
      shell: bash
      run: |
        # Default to no session.
        echo "session_found=false" >> $GITHUB_OUTPUT

        # Verify that the encrypted session file was restored from cache.
        if [[ ! -s "${{ steps.configure-cache.outputs.path }}" ]]; then
          echo "No session file found in cache."
          exit 0
        fi

        # Decrypt the session file.
        echo "${{ inputs.pantheon-machine-token }}" | \
        openssl enc -d -aes-256-cbc -pbkdf2 -iter 10000 -pass stdin -in ${{ steps.configure-cache.outputs.path }} -out $HOME/.terminus/cache/session

        # Check for restored user (string) or allow command to fail gracefully.
        TERMINUS_USER=""
        if ! TERMINUS_USER=$(terminus auth:whoami); then
          echo "terminus auth:whoami failed."
          echo "No valid session found."
          exit 0
        fi

        # Also assert TERMINUS_USER is a string.
        if [[ -z "$TERMINUS_USER" ]]; then
          echo "No valid session found. "
          exit 0
        fi

        echo "Valid session found: $TERMINUS_USER"
        echo "session_found=true" >> $GITHUB_OUTPUT

    - name: Authenticate Terminus
      id: authenticate
      if: ${{ inputs.pantheon-machine-token && steps.decrypt.outputs.session_found != 'true' }}
      shell: bash
      run: |

        # Running this step means the session was not restored from cache
        # and needs to be re-authenticated.

        # Authenticate with Pantheon using the machine token.
        terminus auth:login --machine-token="${{ inputs.pantheon-machine-token }}"

        # Encrypt the session file.
        echo "${{ inputs.pantheon-machine-token }}" | \
        openssl enc -aes-256-cbc -salt -pbkdf2 -iter 10000 -pass stdin -in $HOME/.terminus/cache/session -out ${{ steps.configure-cache.outputs.path }}

    - name: Cache encrypted Terminus session
      id: save-cache
      if: ${{ steps.authenticate.outcome == 'success' && inputs.disable-cache != 'true'}}
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.configure-cache.outputs.path }}
        key: ${{ steps.configure-cache.outputs.key }}
        enableCrossOsArchive: true
